{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'putDependencyRest' property does in the '/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/services/rest/dependency.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/services/rest/dependency.rest.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/rules/index.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/rules/updateRule.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/validations/forms.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/condition-groups/removeConditionGroupsByRule.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/conditions/removeConditionsByRule.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/condition-groups/addConditionGroup.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/conditions/addCondition.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/rules/ruleByIds.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/rules/getRuleConditionsByRuleIds.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/conditions/getConditionsByRule.js\n[object Object]\n/Users/rvillares/Desktop/workdir/leemonade/leemons-saas/leemons/plugins/leemons-plugin-grades/backend/core/condition-groups/getConditionGroupsByRule.js\n[object Object]",
  "response": "{\"summary\":\"Update a specific dependency record\",\"description\":\"This endpoint updates an existing dependency record within the grading system based on provided data that includes the updated attributes for the dependency. The endpoint ensures that only valid changes are applied to the existing record, maintaining data integrity and the correct operation of the grade dependency logic.\\n\\n**Authentication:** Users must be authenticated to update a dependency record. Without proper authentication, the request will be rejected and access to the endpoint will be denied.\\n\\n**Permissions:** Users need to have the 'update_dependency' permission to make changes to dependency records. Attempting to update without adequate permissions will result in the denial of the request.\\n\\nUpon receiving a request, the handler calls a method that validates the incoming data against a predefined schema to ensure that all required fields are present and properly formatted. If the validation passes, it proceeds to fetch the specific dependency record based on an identifier (usually a record ID) provided in the request's parameters. The next step involves the `updateDependency` method from the `Dependency` core, which performs the actual update operation in the database. It applies the received changes to the relevant record while enforcing any necessary business logic to maintain the relationships between grade dependencies. After successfully updating the record, the endpoint responds with the updated data, providing confirmation and visibility of the changes to the client.\",\"AIGenerated\":true}"
}