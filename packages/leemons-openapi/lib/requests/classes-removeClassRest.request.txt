{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'removeClassRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/class.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/class.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/classes/removeClassesByIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/classes/classByIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/programs/programHasSequentialCourses.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/subjects/subjectByIds.js\n[object Object]",
  "response": "{\"summary\":\"Removes multiple class entities by their IDs\",\"description\":\"This endpoint is designed to handle the removal of several class entities specified by their unique identifiers within the academic portfolio system. The process ensures that the specific classes are correctly identified and then deleted from the system's database.\\n\\n**Authentication:** Users must be authenticated to execute this operation. Access to this functionality will be denied if authentication credentials are invalid or absent.\\n\\n**Permissions:** This endpoint requires that the user has administrative rights or specific permissions related to academic class management. Without these permissions, the request will be rejected.\\n\\nThe endpoint initiates by interpreting the received class IDs provided in the request. It calls the `removeClassesByIds` method from the `Classes` core module. This method internally checks each ID to confirm their existence and validates the user's permission to delete each class. Once validation is complete, it proceeds to delete the classes from the system's database. The transaction ensures atomicity to make sure all specified classes are removed effectively and safely. Upon successful completion of the operation, the response confirms the successful deletion of the classes, and in the case of any error during the process, an error message is returned specifying the issue.\",\"AIGenerated\":true}"
}