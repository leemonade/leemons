{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-fundae/backend/services/rest/report.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-fundae/backend/services/rest/report.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-fundae/backend/core/report/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-fundae/backend/core/report/listReports.js\n[object Object]",
  "response": "{\"summary\":\"List all reports accessible by the user\",\"description\":\"This endpoint lists all the reports generated by the system that the authenticated user has access to. The reports can vary from usage statistics to performance analytics, depending on the user's role and permissions in the system.\\n\\n**Authentication:** User authentication is required to ensure secure access to the reports. Only authenticated users can retrieve their available reports list.\\n\\n**Permissions:** The user needs to have 'view_reports' permission to access this endpoint. If the user does not have the necessary permissions, the endpoint will return an unauthorized access error.\\n\\nUpon receiving a request, the `listReports` handler in the `ReportService` first checks for user authentication and required permissions. If authentication or permissions checks fail, it returns an appropriate error response. If the checks pass, it invokes the `listAllReports` method from the `Report` core. This core method queries the database for reports accessible to the user, based on their roles and permissions, and returns a structured list of report data. This data is then formatted appropriately and sent back to the user as a JSON response.\",\"AIGenerated\":true}"
}