{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'saveFeedbackRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/services/rest/feedback.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/services/rest/feedback.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback/saveFeedback.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/validations/forms.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback-questions/deleteFeedbackQuestions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback-questions/updateFeedbackQuestion.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback-questions/createFeedbackQuestion.js\n[object Object]",
  "response": "{\"summary\":\"Saves user feedback for a specific query or service\",\"description\":\"This endpoint allows users to submit feedback related to a specific part of the platform or service. The feedback data collected can include ratings, textual feedback, or other forms of user input related to their experience with the platform.\\n\\n**Authentication:** Users need to be authenticated to submit feedback. Only authenticated user sessions can post feedback, ensuring that feedback can be associated with a specific user account.\\n\\n**Permissions:** The user must have permission to access the specific service or platform component about which they are providing feedback. The required permissions depend on the organization's or platform's specific configuration and access control settings.\\n\\nThe `saveFeedbackRest` handler begins by validating the incoming data against predefined schemas to ensure all required fields are present and correctly formatted. Then, it invokes the `saveFeedback` method from the `Feedback` core service. This method deals with the business logic for saving the feedback into the system's database, including any necessary processing or transformation of feedback data. The process involves logging the feedback entry along with the user's details and the context of the feedback (e.g., the specific part of the service the feedback addresses). Once the feedback is successfully saved, a confirmation is sent back to the user in the form of a JSON response indicating the successful storage of their feedback.\",\"AIGenerated\":true}"
}