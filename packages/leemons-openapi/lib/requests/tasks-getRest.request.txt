{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/services/rest/tasks.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/services/rest/tasks.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/core/task/get.js\n[object Object]",
  "response": "{\"summary\":\"Retrieves task details based on the provided task identifier\",\"description\":\"This endpoint retrieves the specific details of a task identified by its unique identifier. It aims to provide comprehensive information about an individual task, including its status, assigned users, deadlines, and other relevant metadata which are crucial for managing tasks within a project.\\n\\n**Authentication:** User must be logged in to access this endpoint. Authentication ensures that the user's session is valid for security purposes.\\n\\n**Permissions:** Appropriate permissions are required to access this task's details. These permissions ensure that users are only able to retrieve tasks to which they have been granted explicit access rights.\\n\\nUpon receiving a request, this endpoint invokes the `getTask` method from the `tasks` service, which is responsible for querying the database with the task's unique identifier. The method processes the request by validating the userâ€™s identity and permissions before retrieving the task data. The process involves multiple checks for authentication and authorization to ensure secure and compliant access to the task information. Once validated, the task data is fetched and formatted before being sent back to the user as a JSON object that contains the detailed information about the task.\",\"AIGenerated\":true}"
}