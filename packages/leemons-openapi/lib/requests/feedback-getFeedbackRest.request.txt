{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getFeedbackRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/services/rest/feedback.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/services/rest/feedback.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback/getFeedback.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback-questions/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-feedback/backend/core/feedback-questions/getFeedbackQuestionByIds.js\n[object Object]",
  "response": "{\"summary\":\"Collect and display user-specific feedback submissions\",\"description\":\"This endpoint handles the collection and retrieval of feedback submissions specific to a user within the application. It fetches feedback based on user-specific queries, ensuring tailored content delivery that is relevant to the individual's interactions or contributions within the platform.\\n\\n**Authentication:** User authentication is required to access this endpoint. Users must be logged in to view or submit their feedback, ensuring that feedback remains personal and secure.\\n\\n**Permissions:** Specific permissions regarding who can view or submit feedback are enforced. Users need appropriate permissions to perform these actions, typically dependent on their role within the application or specific administrative rights assigned to their profile.\\n\\nUpon receiving a request, the `getFeedbackRest` handler initiates by validating user authentication and permissions. The handler then proceeds to invoke the `getFeedback` method from the 'feedback' core. This method is responsible for accessing the database and retrieving feedback entries that match the criteria specific to the authenticated user. The process involves querying the database with parameters that include user identifiers and other relevant data filters. Once the data is fetched and compiled, it is returned to the user in a structured JSON format, providing a clear and concise overview of the feedback directly related to the user.\",\"AIGenerated\":true}"
}