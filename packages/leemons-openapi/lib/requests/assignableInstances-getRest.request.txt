{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-assignables/backend/services/rest/instance.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-assignables/backend/services/rest/instance.rest.js\n[object Object]",
  "response": "{\"summary\":\"Manages instances of assignables related to specific telemetry configurations\",\"description\":\"This endpoint manages the creation, update, and deletion of assignable instances within the Leemons platform, specifically focusing on elements related to telemetry configurations. The handling includes operations like setting up initial instances based on templates, updating existing configurations, or removing them as necessary based on user actions or system requirements.\\n\\n**Authentication:** User authentication is mandatory to ensure secure access to assignable instances. The system validates the authenticity of the user's credentials before processing any operations.\\n\\n**Permissions:** Appropriate permissions are required to access this endpoint. Users must have administrative rights or specific role-based permissions that allow them to manage assignable instances and their related configurations.\\n\\nThe action flow begins by validating user context and permissions. Once authentication and authorization are confirmed, the handler invokes various methods depending on the request type: `createInstance`, `updateInstance`, or `deleteInstance`. These methods interact with the platform's backend services to perform database operations that reflect the changes made by the user. The process ensures the accurate application of templates for new instances, updates to existing configurations based on user inputs, or the clean removal of instances when no longer needed. The outcome of these operations is then formatted and sent back to the user as a structured JSON response detailing the status and any relevant instance data.\",\"AIGenerated\":true}"
}