{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listProgramRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/programs.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/programs.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/programs/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/programs/listPrograms.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/programs/getUserProgramIds.js\n[object Object]",
  "response": "{\"summary\":\"List all academic programs available to a user\",\"description\":\"This endpoint lists all academic programs that are accessible based on the user's role or permissions within the educational platform. It typically filters and returns a collection of programs that the user is either enrolled in or has administrative access to.\\n\\n**Authentication:** User authentication is required to access the list of programs. Users must provide valid authentication credentials to proceed. An insufficient or missing authentication token will restrict access to the program's information.\\n\\n**Permissions:** Users need specific permissions related to viewing academic programs. Typically, these permissions include roles like academic staff, administrator, or student permissions that allow them to view detailed program data.\\n\\nUpon receiving a request, the `listPrograms` method in the `programs` core is called. This method verifies the context of the user's request, checking for authentication and necessary permissions. Based on the authenticated user's role and permissions, it queries the database for accessible academic programs. The method then processes the received data, filtering and structuring the programs into a suitable format for response. Finally, a structured list of programs is sent back to the user in JSON format, encapsulating key details like program names, descriptions, and eligibility criteria.\",\"AIGenerated\":true}"
}