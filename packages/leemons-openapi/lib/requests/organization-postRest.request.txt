{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'postRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/services/rest/organization.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/services/rest/organization.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/organization/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/organization/getOrganization.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/organization/updateOrganization.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/organization/compileTokens.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/organization/transform.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/theme/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/theme/update.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/theme/findOne.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-admin/backend/core/organization/getJsonTheme.js\n[object Object]",
  "response": "{\"summary\":\"Update organization settings\",\"description\":\"This endpoint updates the organization details based on the given settings. This could include updates to organization name, address, contact details, and other organizational configurations relevant for the application.\\n\\n**Authentication:** It is required that users be authenticated to perform updates on the organization settings. Authentication ensures that only authorized users can make changes to sensitive organizational information.\\n\\n**Permissions:** The user must have administrative rights or specific role-based permissions to update organization settings. Without sufficient permissions, the request will be rejected to maintain organizational data integrity.\\n\\nThe flow begins with the `updateOrganization` handler in the `organization.rest.js` service file, which utilizes the `updateOrganization` core function from `updateOrganization.js`. This function is responsible for handling the logic to update the desired organizational settings in the database. It involves validation checks to ensure data integrity and authorization logic to verify that the user has the required permissions to make changes. Upon successful validation and authorization, the organization's data is updated in the database, and a success response is generated and sent back to the user.\",\"AIGenerated\":true}"
}