{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getQuestionBankDetailRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/services/rest/questionsBanks.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/services/rest/questionsBanks.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions-banks/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions-banks/listQuestionsBanks.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions-banks/saveQuestionsBanks.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/validations/forms.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/question-bank-subjects/removeSubjectsFromQuestionBanks.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/question-bank-subjects/addSubjectsToQuestionBanks.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/question-bank-categories/updateCategory.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/question-bank-categories/createCategory.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions/deleteQuestions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions/updateQuestion.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions/createQuestion.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions-banks/getQuestionsBanksDetails.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions/getByIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions-banks/findByAssetIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/questions-banks/deleteQuestionBank.js\n[object Object]",
  "response": "{\"summary\":\"Retrieve detailed information about a specific question bank\",\"description\":\"This endpoint fetches comprehensive details about a particular question bank identified by its unique ID. It provides a deep dive into the question bank's attributes, including associated categories, subjects, and individual questions contained within the bank.\\n\\n**Authentication:** Users must be authenticated to access the details of a question bank. Access attempts with invalid or missing authentication tokens will be denied.\\n\\n**Permissions:** The user must have the appropriate permissions to view the question bank details. Generally, this includes permissions like 'view_question_bank' or 'manage_question_bank', depending on the implementation specifics of the security policy in place.\\n\\nThe detailed flow of this controller handler begins with the receipt of the request that includes the question bank ID. The handler invokes the `getQuestionsBanksDetails` method from the `questions-banks` core module. This method is responsible for querying the database to retrieve all relevant data about the question bank, including meta-data, categories, associated subjects, and questions. Depending on the design, it may also involve additional model handlers to fetch related data from different tables or services. The response is then prepared, encapsulating all the fetched information in a well-structured JSON format, which is returned to the user.\",\"AIGenerated\":true}"
}