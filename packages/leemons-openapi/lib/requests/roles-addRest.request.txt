{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'addRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/services/rest/roles.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/services/rest/roles.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/markAllUsersInGroupToReloadPermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/detailByUri.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/user-agents/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/user-agents/getUserAgentsInfo.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/permissions/transformArrayToObject.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/updateWithRole.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/checkIfCanCreateNUserAgentsInGroup.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/getRolesCenters.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/addWithRole.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/add.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/validations/exists.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/existByName.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/permissions/manyPermissionsHasManyActions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/permissions/hasActionMany.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/addPermissionMany.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/searchUsersWithRoleAndMarkAsReloadPermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/removeUser.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/user-agents/existUserAgent.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/addUserAgent.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/remove.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/exist.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/create.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/list.js\n[object Object]",
  "response": "{\"summary\":\"Add role information into the system\",\"description\":\"This endpoint allows for the addition of new role data into the system. It specifically handles the creation of roles along with their respective permissions and associated details within the user management module of the platform.\\n\\n**Authentication:** Users must be logged in to create new roles. This endpoint requires a valid authentication token, which should be included in the request headers.\\n\\n**Permissions:** Users need to have 'create_role' permission to access this endpoint. Without this permission, the endpoint will deny the request, ensuring that only authorized users can add new roles.\\n\\nUpon receiving a request, the `add` action in the roles management service is called. The service first checks for the necessary permissions against the user's role. If validated, it processes the provided data to ensure it meets the format and validation standards set by the platform. Once the data is validated, it interacts with the underlying database to insert the new role record. A response is then generated based on the outcome of the database operation - success if the role is added correctly, or an error message detailing any issues encountered during the process.\",\"AIGenerated\":true}"
}