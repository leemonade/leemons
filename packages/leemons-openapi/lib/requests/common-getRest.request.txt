{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-multilanguage/backend/services/rest/common.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-multilanguage/backend/services/rest/common.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-multilanguage/backend/core/localization/global/getLocalizations/getLocalizations.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-multilanguage/backend/helpers/cacheKeys.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-multilanguage/backend/core/localization/global/getLocalizations/getLocalizationsByKeys.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-multilanguage/backend/core/localization/global/getLocalizations/getLocalizationsByKeysStartsWith.js\n[object Object]",
  "response": "{\"summary\":\"Provides multilingual support by managing localization data\",\"description\":\"This endpoint manages localization configurations and translations across different languages, ensuring that end-users experience a customizable interface based on their selected language preference.\\n\\n**Authentication:** User authentication is mandatory to access this endpoint. Unauthorized access is prevented, and only authenticated sessions will proceed with requests handling.\\n\\n**Permissions:** Appropriate permissions need to be granted for users to manipulate localization settings. Users must have the 'manage_localization' permission to update or fetch localization data.\\n\\nThis endpoint initiates its process by gathering key-value pairs from localization files or databases, which contain translation strings mapped to particular language keys. It uses caching mechanisms to enhance performance by reducing load times during the retrieval of these localizations. Depending on the request details, the `getLocalizations`, `getLocalizationsByKeys`, or `getLocalizationsByKeysStartsWith` functions from the 'globalization' core module are invoked. These functions are responsible for accessing detailed localization data, filtering it based on the provided keys or patterns, and ensuring the data is up-to-date before it is sent back to the client. The final output is then structured in a JSON format, containing the relevant localization data that aligns with the requested language settings.\",\"AIGenerated\":true}"
}