{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'saveNodeRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/services/rest/node.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/services/rest/node.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/core/nodes/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/core/nodes/saveNode.js\n[object Object]",
  "response": "{\"summary\":\"Saves or updates curriculum node details\",\"description\":\"This endpoint is designed for the creation or updating of curriculum node details. It handles both the creation of new nodes and the updates to existing nodes, focusing on saving the data related to a specific curriculum structure, such as lectures, lessons, or topics within the educational platform.\\n\\n**Authentication:** User authentication is required to ensure that only logged-in users can alter curriculum nodes. Authenticated status is mandatory to proceed with any data modification.\\n\\n**Permissions:** Users need to have specific rights to create or edit curriculum nodes. The required permissions include role-based checks that ensure only authorized personnel such as educators or curriculum managers can modify the content.\\n\\nThe process begins with the `saveNodeRest` action receiving the request and extracting necessary data such as node details from the request body. It then calls the `saveNode` method from the `nodes` core module, passing the extracted data. This method is responsible for checking the existence of the node by ID, performing validations, and then either updating the existing node or creating a new one if it does not exist. All database interactions necessary for storing or updating the node are handled within this method. On successful completion of these operations, the method returns an acknowledgment that the node details have been successfully saved or updated, which is then relayed back to the user through a standardized API response format.\",\"AIGenerated\":true}"
}