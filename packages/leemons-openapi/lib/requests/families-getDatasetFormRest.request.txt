{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getDatasetFormRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-families/backend/services/rest/families.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-families/backend/services/rest/families.rest.js\n[object Object]",
  "response": "{\"summary\":\"Fetches dataset form associated with family structures\",\"description\":\"This endpoint is designed to fetch the dataset form configurations that are used in creating or editing family structures within the system. The form is a critical component for users to input accurate data relevant to the family constructs outlined by the application's logic.\\n\\n**Authentication:** Users must be authenticated to view or interact with the family dataset forms. Authentication ensures that the request is associated with a valid and active user session.\\n\\n**Permissions:** Access to the dataset form is governed by specific permissions that ensure only users with 'edit families' capability or similar rights can fetch the form data. This ensures that sensitive information or tools used in managing family data are strictly regulated.\\n\\nUpon receiving a request, the handler for the `getDatasetFormRest` method begins by validating the user's authentication and permissions. If these checks pass, it calls the `getDatasetForm` service from the `familyFormService`. This service is responsible for retrieving the form configuration details from a stored layout or predefined configuration. The method ensures that the retrieved form matches the current user's permissions and operational scope to interact with family data. Once the data is fetched and validated, it is formatted appropriately and sent back as a JSON response, encapsulating all necessary fields and configurations required for the user interface to render the family data form correctly.\",\"AIGenerated\":true}"
}