{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getUploadChunkUrlsRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/files.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/files.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/files/getUploadChunkUrls/getUploadChunkUrls.js\n[object Object]",
  "response": "{\"summary\":\"Generate upload URLs for file chunks\",\"description\":\"This endpoint generates temporary URLs for uploading file chunks. These URLs are used to securely upload parts of a large file incrementally, which helps in handling large file uploads efficiently and reliably.\\n\\n**Authentication:** Users must be authenticated to generate upload chunk URLs. Access to this endpoint without valid authentication will result in a denial of service.\\n\\n**Permissions:** Users need specific permissions to generate upload chunk URLs, typically linked to rights to upload files or manage file uploads within the application.\\n\\nThe process initiated by this endpoint involves invoking the `getUploadChunkUrls` method located in the `files` core. This method calculates the number of chunks required based on the file size submitted by the user and creates a series of secure, temporary URLs for each chunk. Each URL is specifically generated to allow a part of the file to be uploaded to a designated storage location. The completion of this operation results in a response containing a list of these URLs, which the client can use to sequentially upload chunks of the large file.\",\"AIGenerated\":true}"
}