{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getUserQuestionResponsesRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/services/rest/tests.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/services/rest/tests.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/tests/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/tests/getUserQuestionResponses.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tests/backend/core/tests/findQuestionResponses.js\n[object Object]",
  "response": "{\"summary\":\"Fetches user-specific question responses\",\"description\":\"This endpoint fetches responses to questions that have been submitted by a specific user in the system. It aggregates responses across different assessments or tests where the user participated, providing a comprehensive view of the user's interactions and answers.\\n\\n**Authentication:** User authentication is strictly required to access this endpoint. Users must provide a valid authentication token which is verified for integrity and validity before processing the request.\\n\\n**Permissions:** This endpoint requires the user to have specific permissions related to viewing test responses. Typically, permissions such as `view_tests` or `view_user_responses` are checked to ensure authorized access.\\n\\nUpon receiving a request, the handler first validates the user's authentication status and permissions. If either check fails, an error response is returned. Otherwise, it proceeds to invoke the `getUserQuestionResponses` method from the tests core logic. This method compiles data related to the user's question responses by querying the database for entries that match the user's ID across various tests. The resulting data set, formatted as JSON, details the questions, their corresponding responses made by the user, and contextual details like the date of the test and the labels associated with each question. The response is then structured and sent back to the user, providing a clear and detailed overview of their test interactions.\",\"AIGenerated\":true}"
}