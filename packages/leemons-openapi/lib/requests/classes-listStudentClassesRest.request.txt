{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listStudentClassesRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/class.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/class.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/classes/listStudentClasses.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/classes/classByIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/programs/programHasSequentialCourses.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/core/subjects/subjectByIds.js\n[object Object]",
  "response": "{\"summary\":\"List all classes associated with a specific student\",\"description\":\"This endpoint lists all the academic classes that a specific student is currently enrolled in or has completed. This involves fetching data that includes the class details, timings, and any other related academic information that pertains to the student's academic record.\\n\\n**Authentication:** Users need to be authenticated to access the list of classes for a student. Authentication ensures that only authorized users such as educational staff or the students themselves can access personal academic information.\\n\\n**Permissions:** Permissions required include roles such as academic staff or administrator. Specific access rights might be required to view detailed student class data to ensure confidentiality and adherence to educational standards.\\n\\nUpon request, the 'listStudentClassesRest' handler in the 'class.rest.js' starts by validating the user's authentication and permission levels. The main process involves calling the `listStudentClasses` function from the `classes` core module, which retrieves all class data associated with the student's ID provided in the request. This function queries the database for relevant class entries and compiles them into a structured format. The response is then prepared to include all pertinent details about the classes, formatted in JSON for client-side integration.\",\"AIGenerated\":true}"
}