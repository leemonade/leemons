{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'saveKanbanEventOrdersRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/services/rest/calendar.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/services/rest/calendar.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/core/kanban-event-orders/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/core/kanban-event-orders/save.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/core/kanban-event-orders/list.js\n[object Object]",
  "response": "{\"summary\":\"Save Kanban event order configurations\",\"description\":\"This endpoint is designed to save changes to the order of kanban events as defined by the user in a calendar application. The updated order reflects how events are displayed or prioritized in the user's kanban view.\\n\\n**Authentication:** Users need to be authenticated to modify the order of kanban events. Access to this functionality is restricted based on user authentication status.\\n\\n**Permissions:** This endpoint requires the user to have the 'edit_kanban_order' permission. Without this, the user's request to reorder kanban events will be denied.\\n\\nUpon receiving a request, the `saveKanbanEventOrdersRest` method in the `calendar.rest.js` controller validates the user's authentication and permissions. If validation succeeds, it then calls the `save` method from the `kanban-event-orders` core module. This method processes the input, which typically includes an array of event IDs and the desired order. It ensures that the order changes comply with business logic, such as checking for conflicts or invalid data. Once the order is successfully updated in the database, the endpoint sends a response that indicates success to the client, along with possibly returning the updated order of events.\",\"AIGenerated\":true}"
}