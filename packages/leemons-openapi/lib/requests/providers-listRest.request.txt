{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/provider.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/provider.rest.js\n[object Object]",
  "response": "{\"summary\":\"Lists all resources in the Leebrary system\",\"description\":\"This endpoint facilitates the retrieval of all available resources stored within the Leebrary system. It filters and presents data based on specific query parameters such as resource type, tags, and user permissions, making it an essential tool for efficient resource management.\\n\\n**Authentication:** User authentication is required to access this endpoint. Users must provide a valid token that will be verified to ensure legitimacy and authority over the requested resources. Unauthorized access attempts will be logged and denied.\\n\\n**Permissions:** Users need to have the 'read_resources' permission to access the list of resources. This permission checks that the user has the requisite rights to view the resources in their query scope. Lack of required permissions will result in denial of access to the resource data.\\n\\nThe 'listRest' handler begins by validating the user's authentication status and permissions. Following successful validation, it utilizes the `getAllResources` method from the `ResourceService`. This method takes into account various filters such as resource type and user-specific tags. It interacts directly with the database to fetch all relevant resources, ensuring all security and privacy guidelines are adhered to. The fetched data is then compiled into a tuple or list and returned in a structured JSON format as the response to the client, effectively encapsulating all accessible resources as per user credentials and query parameters.\",\"AIGenerated\":true}"
}