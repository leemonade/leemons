{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/services/rest/roles.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/services/rest/roles.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/markAllUsersInGroupToReloadPermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/detailByUri.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/user-agents/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/user-agents/getUserAgentsInfo.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/permissions/transformArrayToObject.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/updateWithRole.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/checkIfCanCreateNUserAgentsInGroup.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/getRolesCenters.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/addWithRole.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/add.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/validations/exists.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/existByName.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/permissions/manyPermissionsHasManyActions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/permissions/hasActionMany.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/addPermissionMany.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/roles/searchUsersWithRoleAndMarkAsReloadPermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/removeUser.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/user-agents/existUserAgent.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/addUserAgent.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/remove.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/exist.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/create.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-users/backend/core/groups/list.js\n[object Object]",
  "response": "{\"summary\":\"List roles available in the system\",\"description\":\"This endpoint lists all the roles available within the system, providing a comprehensive overview of what types of roles users can be assigned to. It is particularly useful for system administrators or software managing user permissions and role-based access controls within the application.\\n\\n**Authentication:** Users need to be authenticated to access this list. Access will be denied if the authentication credentials are not provided or are invalid.\\n\\n**Permissions:** This endpoint requires administrative rights. A user must have the proper administrative role or permission set to access the roles list, ensuring that only authorized personnel can view sensitive role information.\\n\\nUpon receiving a request, this endpoint initiates by invoking the `listRoles` method within the roles management service. This method interacts with the database to retrieve all records from the roles collection. The resulting data includes detailed role identifiers, names, and any associated permissions or constraints each role bears. The response from the service is structured and returned to the requester in JSON format, outlining all roles with their respective details.\",\"AIGenerated\":true}"
}