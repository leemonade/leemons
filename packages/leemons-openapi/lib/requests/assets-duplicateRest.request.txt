{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'duplicateRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/assets.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/assets.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/duplicate.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/shared/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/shared/normalizeItemsArray.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/checkDuplicatePermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/getAndCheckAsset.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/getFileIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/getFilesToDuplicate.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/handleTags.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/handleAssetDuplication.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/add.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleBookmarkData.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/validations/forms.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleUserSessionData.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleCategoryData.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/checkAndHandleCanUse.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleFileUpload.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/files/helpers/uploadFromSource.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleVersion.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/createAssetInDb.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleSubjects.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handlePermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/helpers/getAssetPermissionName.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/add/handleFiles.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/handleCoverDuplication.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/handleBookmarkDuplication.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/duplicate/handleFilesDuplication.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/prepareAsset/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/prepareAsset/prepareAsset.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/prepareAsset/prepareAssetType.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/prepareAsset/getFileUrl.js\n[object Object]",
  "response": "{\"summary\":\"Duplicates an asset based on a provided ID\",\"description\":\"This endpoint facilitates the duplication of a digital asset identified by its unique ID. The duplication process includes duplicating the asset's metadata, tags, associated files, and any specific permissions or categorizations linked to the original asset.\\n\\n**Authentication:** Users must be authenticated and possess the required session tokens to initiate a duplication request. Authentication verifies user identity and session validity before proceeding.\\n\\n**Permissions:** Users need specific 'duplicate' permissions on the asset they intend to duplicate. Without these permissions, the request will be denied, ensuring that only authorized users can duplicate assets.\\n\\nUpon receiving a duplication request, the endpoint initially verifies user authentication and checks if the user has the necessary duplication permissions for the specified asset. If authenticated and authorized, the endpoint calls multiple services: it retrieves the original asset's information, checks for existing duplicates, and then proceeds to duplicate the asset's metadata, files, and tags. Throughout this process, all related entities such as bookmarks or categories associated with the asset are also considered for duplication. The final output is the creation of a new asset entry in the database, echoing the properties of the original while ensuring data consistency and integrity.\",\"AIGenerated\":true}"
}