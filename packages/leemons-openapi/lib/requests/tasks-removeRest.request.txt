{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'removeRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/services/rest/tasks.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/services/rest/tasks.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/core/task/remove.js\n[object Object]",
  "response": "{\"summary\":\"Remove a specified task\",\"description\":\"This endpoint allows for the deletion of a specific task based on the task ID provided. The purpose is to permanently remove a task record from the system, ensuring that all its associated data is also cleared appropriately from the database.\\n\\n**Authentication:** Users need to be logged in to perform deletion operations. Authentication is required to ensure that a user can only delete tasks they are authorized to remove.\\n\\n**Permissions:** This endpoint requires the user to have task deletion permissions. If the user does not have the appropriate permissions, the request will be denied, ensuring system security and data integrity.\\n\\nUpon receiving a deletion request, the `removeRest` handler in the `tasks.rest.js` file calls the `remove` method from the `task` core (`remove.js`). The method takes the task ID from the request parameters and proceeds to check if the task exists and if the user has the necessary permissions to delete it. If these conditions are met, the task is removed using a database call that specifically targets this entry. Subsequent related data such as task logs or sub-tasks may also be cleared, depending on the system's configuration and relationships defined within the database. The process culminates in a response that confirms the deletion or provides an error message detailing why the task could not be deleted.\",\"AIGenerated\":true}"
}