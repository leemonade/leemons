{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listCurriculumRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/services/rest/curriculum.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/services/rest/curriculum.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/core/curriculum/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-curriculum/backend/core/curriculum/listCurriculums.js\n[object Object]",
  "response": "{\"summary\":\"List all curriculums available in the system\",\"description\":\"This endpoint lists all curriculums configured within the Leemons platform. It provides a comprehensive overview of the curriculum structures that are available for educational institutions to manage and utilize in their educational offerings.\\n\\n**Authentication:** Users must be authenticated to access the list of curriculums. Access to this endpoint requires valid user credentials, which are verified through the platform's authentication system. An invalid or missing authentication token will lead to access denial.\\n\\n**Permissions:** Appropriate permissions are required to view the list of curriculums. The user must have curriculum management roles or specific permissions that allow them to visualize curriculum configurations.\\n\\nAfter authentication, the `listCurriculums` method in the `curriculum` core is called. This method is responsible for querying the database for all curriculums and their relevant details such as titles, scopes, and applicable educational standards. The flow involves retrieving these data entries and formatting them into a structured response that the front end can display. The actual data handling includes sorting and potentially filtering curriculums based on user permissions and roles, ensuring that users receive content appropriate to their access rights. The response is then delivered in JSON format listing the curriculums.\",\"AIGenerated\":true}"
}