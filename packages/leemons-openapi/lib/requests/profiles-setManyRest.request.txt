{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'setManyRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/services/rest/profiles.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/services/rest/profiles.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-tasks/backend/core/profiles/set.js\n[object Object]",
  "response": "{\"summary\":\"Sets multiple user profiles in a bulk operation\",\"description\":\"This endpoint allows for the bulk updating or creation of user profiles within the system. The operation can set multiple profiles simultaneously, handling each one according to the details provided in the request body.\\n\\n**Authentication:** User authentication is required to execute this endpoint. Users attempting to access this endpoint without valid authentication will receive an error response indicating that authentication credentials are invalid or not provided.\\n\\n**Permissions:** Users need to have appropriate permissions to create or update profiles. Typically, this includes administrative rights or specific profile management permissions granted by the system administrator.\\n\\nInitially, the `setManyRest` handler in the Moleculer service calls the `SetMany` method from the backendâ€™s core profile module. This method parses and validates the incoming data for each profile to be set. It checks for required fields, data integrity, and conformity to the expected format. After validation, it either updates existing profiles or creates new ones in the database, depending on whether the profiles already exist. The operation is transactional, ensuring that all profiles are set successfully or none at all, to maintain data consistency. Each profile's result is tracked, and a detailed summary of the creation or update process for each profile is compiled and returned to the user in a JSON format, indicating success or detailing any errors encountered.\",\"AIGenerated\":true}"
}