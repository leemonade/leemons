{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'postCourseRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/course.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-academic-portfolio/backend/services/rest/course.rest.js\n[object Object]",
  "response": "{\"summary\":\"Create a new course in the academic portfolio\",\"description\":\"This endpoint allows for the creation of a new course within the academic portfolio system. It handles the course data submission and integrates it into the educational institution's curriculum system, ensuring the new course is registered correctly and available for student enrollment.\\n\\n**Authentication:** User authentication is mandatory to ensure security and proper access control. Only authenticated users can submit new courses to the system.\\n\\n**Permissions:** This endpoint requires the user to have 'course_creation' permission within their role. A user without sufficient permissions will be denied access to perform this operation.\\n\\nThe process begins when the endpoint receives a POST request containing the course details. The endpoint first verifies the user's authentication and authorization, ensuring they have the proper rights to create a course. Once verified, it invokes the `addCourse` method of the `CourseService`. This method takes care of validating the course data against the business rules and saves the course into the database. On successful creation, a confirmation is sent back to the user along with the details of the newly created course, such as its ID and name, in a structured JSON response. Error handling is meticulously integrated to manage any exceptions or validation failures, sending appropriate error messages to the user.\",\"AIGenerated\":true}"
}