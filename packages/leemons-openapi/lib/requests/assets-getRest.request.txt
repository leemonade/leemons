{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'getRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/assets.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/services/rest/assets.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getByIds.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/buildQuery.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getUserPermissionsByAsset.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getAssetsWithPermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/getClassesPermissions/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/getClassesPermissions/getClassesPermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/helpers/getAssetPermissionName.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/helpers/canUnassignRole.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/helpers/getRolePermissions.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/helpers/validateRole.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getAssetsWithSubjects.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getAssetsWithFiles.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/bookmarks/find/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/bookmarks/find/find.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getAssetsTags.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getAssetsCategoryData.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/getAssetsProgramsAggregatedById.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/assets/getByIds/processFinalAsset.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/getUsersByAsset/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/getUsersByAsset/getUsersByAsset.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/getByAsset/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/getByAsset/getByAsset.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-leebrary/backend/core/permissions/helpers/canAssignRole.js\n[object Object]",
  "response": "{\"summary\":\"Retrieve specific assets based on provided IDs\",\"description\":\"This endpoint is designed to fetch a detailed list of assets by their unique identifiers. It caters to retrieving comprehensive asset details which could include metadata, associated permissions, user roles, and more, depending on the asset's configuration and user's access rights.\\n\\n**Authentication:** Access to this endpoint requires user authentication. Users need to pass valid authentication tokens with their requests to prove their identity and session validity.\\n\\n**Permissions:** Users must have appropriate permissions to view the requested assets. The specific permissions required will depend on the assets being accessed and the level of detail required. Permissions checks are integral to ensure that users can only retrieve data for assets they are authorized to access.\\n\\nUpon receiving a request, the endpoint processes input IDs and invokes several internal methods to retrieve the assets. These methods include querying the database for asset details, checking user permissions, and potentially aggregating additional data related to each asset such as associated files, permissions, or related programs. The result encapsulates a comprehensive view of each asset, tailored to the authenticated userâ€™s access rights. The response is then formatted as a JSON object containing all the necessary details about each asset.\",\"AIGenerated\":true}"
}