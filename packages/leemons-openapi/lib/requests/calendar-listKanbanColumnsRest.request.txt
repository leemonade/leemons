{
  "systemMessage": "Respond as if you were an expert in REST APIs for JavaScript using the Moleculer framework.Return a valid JSON object with only 'summary' and 'description' properties that can be used to document, using OpenAPI specifications, what the handler of the 'listKanbanColumnsRest' property does in the '/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/services/rest/calendar.rest.js' file, which is an action in the Moleculer JavaScript framework.\nI want 'summary' only have a short resume of what the controller does. Don't start it with \"This handler\" or \"This Endpoint\", only the summary.\nI want the description to be in markdown format and contain the following information (each point should be clearly separated into a different paragraph):\n* Short detailed description of what the handler does. It should always start with \"This endpoint\" and should not contain information about the parameters it receives and the response it returns, only what is expected to be done.\n* Authentication: Information about whether the user needs to be logged in to use the endpoint. It should start with '**Authentication:**\"\n* Permissions: Information about the permissions required for the user to use the endpoint. It should start with \"**Permissions:**\"\n* Fully detailed description of what the controller handler, and the methods the controller flow from request to response, does.\nYou can use this response as example: '{\"summary\":\"Retrieve assets owned by the current user\",\"description\":\"This endpoint retrieves all digital assets that are owned by the currently authenticated user. The collection of assets returned includes those that the user has created or have been shared with them within the platform.\\n\\n**Authentication:** The users must be authenticated to access their digital assets. An invalid or missing authentication token will result in endpoint access denial.\\n\\n**Permissions:** No specific permissions are called out for this endpoint; however, it's implied that users can only access assets that they have rights to view based on the asset's ownership and sharing properties.\\n\\nThe endpoint starts by invoking the `getByUser` method from the `Pins` core, passing in the `ctx` (context) parameter which includes user authentication information. This method leverages a database call to find all pins associated with the user's agent ID. These pins represent the user's digital assets within the platform. The result is a promise that, when resolved, returns the list of assets that the authenticated user owns or has access to. The HTTP response contains these assets in a JSON array format.\"}'\n",
  "userMessage": "/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/services/rest/calendar.rest.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/core/kanban-columns/index.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/core/kanban-columns/add.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/validations/forms.js\n[object Object]\n/Users/usuario/Sites/leemonade/leemons/plugins/leemons-plugin-calendar/backend/core/kanban-columns/list.js\n[object Object]",
  "response": "{\"summary\":\"List all Kanban columns associated with a specific calendar\",\"description\":\"This endpoint fetches a list of all Kanban columns that are associated with a specific calendar within the leemons plugin calendar system. The endpoint serves as a utility for front-end services to render organized Kanban views based on the user's calendar data.\\n\\n**Authentication:** Users must be authenticated to request the list of Kanban columns. De-authenticated or improperly authenticated requests will be promptly denied, safeguarding the user-specific data.\\n\\n**Permissions:** Proper access rights are required to view the Kanban columns. Typically, users need permissions to access the specific calendar or project management features that relate to Kanban management.\\n\\nThe process begins when the `listKanbanColumnsRest` action is invoked, pulling the relevant calendar ID from the request parameters. It then calls the `list` method from the `kanban-columns` core module. This module queries the database for all columns linked to the specified calendar ID, ensuring that the response is tailored to the authenticated user's context and permissions. Each column is then formatted appropriately before being sent back to the client as a JSON array in the HTTP response. This ensures users receive an accurate, up-to-date representation of their calendar's Kanban layout.\",\"AIGenerated\":true}"
}