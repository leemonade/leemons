const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const os = require('os');
const prettier = require('prettier');

const { createOpenapiDoc } = require('./createOpenapiDoc');
const { writeFile, readFile } = require('./files');
const { prettierOptions } = require('./prettierOptions');

/**
 * Prepares the schema file
 * @param {string} schemaPath - The path of the schema
 * @param {string} controller - The controller
 * @param {Object} schema - The schema
 * @throws {Error} If the schema has been manually modified.
 */
function prepareSchemaFile(schemaPath, controller, schema) {
  const schemaFilePath = path.join(schemaPath, `${controller}.js`);

  let schemaFile = null;
  try {
    schemaFile = readFile(schemaFilePath);
  } catch (error) {
    //
  }

  if (schemaFile) {
    const firstLine = schemaFile.split(os.EOL)[0];
    const hash = firstLine.split('// automatic hash: ')[1];
    const schemaContent = schemaFile.split(os.EOL).slice(1).join(os.EOL);
    const calculatedHash = crypto.createHash('sha256').update(schemaContent).digest('hex');

    if (hash !== calculatedHash) {
      throw new Error(`(${schemaPath}/${controller}.js)Schema has been manually modified`);
    }
  }

  const schemaContent = prettier.format(
    `const schema = ${JSON.stringify(schema, null, 4)};

    module.exports = {schema};
    `,
    prettierOptions
  );

  const calculatedHash = crypto.createHash('sha256').update(schemaContent).digest('hex');

  writeFile(
    schemaFilePath,
    `// automatic hash: ${calculatedHash}
${schemaContent}`
  );
}

/**
 * Checks if a file is auto-generated
 * @param {string} filePath - The path of the file
 * @returns {boolean} - Returns true if the file is auto-generated, false otherwise
 */
function canUpdateAutogeneratedFile(filePath) {
  // Por defecto no se actualizan los archivos auto-generados (ni los que se han cambiado a mano (que no tienen el AIGenerated a true))
  const updateAutoGeneratedFiles =
    (process.env.OPENAPI_UPDATE_AUTOGENERATED_FILES &&
      process.env.OPENAPI_UPDATE_AUTOGENERATED_FILES !== 'false') ||
    false;

  const fileContent = readFile(filePath);

  // Esto ocurre cuando se ha autogenerado el archivo para a√±adir los openapi schemas de request y response
  // Pero no se ha definido el summary y el description
  if (fileContent.includes('// summary:') && fileContent.includes('// description:')) return true;

  return (
    updateAutoGeneratedFiles &&
    fileContent.includes("AIGenerated: 'true'") &&
    !fileContent.includes("//AIGenerated: 'true'") &&
    !fileContent.includes("// AIGenerated: 'true'")
  );
}

/**
 * Prepares the openapi file
 * @param {Object} options - The options
 * @param {string} options.controllerFilePath - The path of the controller file. Used to determine the directory structure for the openapi files.
 * @param {string} options.service - The service. Used to name the openapi files.
 * @param {string} options.controller - The controller. Used to name the openapi files.
 * @param {Object} [options.responseSchema={}] - The response schema. Used to generate the openapi response schema. Defaults to an empty object.
 * @param {Object} [options.requestSchema={}] - The request schema. Used to generate the openapi request schema. Defaults to an empty object.
 * @param {Object} [options.openapiDoc={}] - The openapi document. Used to generate the openapi documentation. Defaults to an empty object.
 * @param {boolean} [options.useAItoCreateOpenapiDoc=false] - Whether to use AI to create the openapi document. Defaults to false.
 */

async function prepareOpenapiFile({
  controllerFilePath,
  service,
  controller,
  responseSchema = {},
  requestSchema = {},
  openapiDoc = {},
  useAItoCreateOpenapiDoc = false,
}) {
  const controllerPath = path.dirname(controllerFilePath);
  const openapiPath = path.join(controllerPath, 'openapi', service);
  const responseSchemaPath = path.join(openapiPath, 'schemas', 'response');
  const requestSchemaPath = path.join(openapiPath, 'schemas', 'request');

  if (!fs.existsSync(responseSchemaPath)) {
    fs.mkdirSync(responseSchemaPath, { recursive: true });
  }
  if (!fs.existsSync(requestSchemaPath)) {
    fs.mkdirSync(requestSchemaPath, { recursive: true });
  }

  const openapiFilePath = path.join(openapiPath, `${controller}.js`);

  if (!fs.existsSync(openapiFilePath) || canUpdateAutogeneratedFile(openapiFilePath)) {
    const _openapiDoc = useAItoCreateOpenapiDoc
      ? await createOpenapiDoc(service, controller, controllerFilePath)
      : openapiDoc;

    const openapiResponse = `const { schema } = require('./schemas/response/${controller}');
    const { schema: xRequest } = require('./schemas/request/${controller}');

    const openapi = {
      ${_openapiDoc.summary ? `summary: "${_openapiDoc.summary}",` : '// summary: "Summary",'}
      ${
        _openapiDoc.description
          ? `description: \`${_openapiDoc.description.replace(/`/g, '\\`')}\`,`
          : '// description: "Description",'
      }
      ${_openapiDoc.AIGenerated ? `AIGenerated: "true",` : ''}
      "x-request": xRequest,
      responses: {
        200: {
          description: 'Success',
          content: {
            'application/json': {
              schema,
            },
          },
        },
      },
    };

    module.exports = {
      openapi,
    };
`;

    writeFile(openapiFilePath, prettier.format(openapiResponse, prettierOptions));
  }
  prepareSchemaFile(responseSchemaPath, controller, responseSchema);
  prepareSchemaFile(requestSchemaPath, controller, requestSchema);
}

module.exports = { prepareOpenapiFile };
